worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    upstream flask_backend {
        server flask-app:5000;  
    }

    
    resolver 127.0.0.11 valid=30s;

    server {
        listen 80;

        location / {
            
            set $token $http_x_auth_token;

           
            access_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                -- Set Redis connection timeout
                red:set_timeout(1000)  -- 1 second

                -- Connect to Redis using the resolved hostname
                local ok, err = red:connect("redis", 6379)
                if not ok then
                    ngx.log(ngx.ERR, "Failed to connect to Redis: ", err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end

                -- Get the token from Redis
                local redis_token, err = red:get("auth_token")
                if not redis_token then
                    ngx.log(ngx.ERR, "Failed to get token from Redis: ", err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end

                -- Compare the token from the request with the Redis token
                if redis_token ~= ngx.var.token then
                    ngx.log(ngx.ERR, "Invalid token: ", ngx.var.token)
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                -- Close the Redis connection
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.log(ngx.ERR, "Failed to set Redis keepalive: ", err)
                end
            }

            
            proxy_pass http://flask_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
